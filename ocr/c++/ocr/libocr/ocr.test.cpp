#include <boost/test/unit_test.hpp>
#include <libocr/ocr.hpp>
#include <variant>

/*
 0123456789012345678901234567
0...._.._....._....._.._.._.n
1..|._|._||_||_.|_...||_||_|n
2..||_.._|..|._||_|..||_|..|n
3...........................n
*/

BOOST_AUTO_TEST_CASE(parse_1_to_9)
{
  constexpr xzr::ocr::ocr_str_t ocr_str{
    { '.', '.', '.', '.', '_', '.', '.', '_', '.', '.', '.', '.', '.', '_',
      '.', '.', '.', '.', '.', '_', '.', '.', '_', '.', '.', '_', '.', '.',
      '.', '|', '.', '_', '|', '.', '_', '|', '|', '_', '|', '|', '_', '.',
      '|', '_', '.', '.', '.', '|', '|', '_', '|', '|', '_', '|', '.', '.',
      '|', '|', '_', '.', '.', '_', '|', '.', '.', '|', '.', '_', '|', '|',
      '_', '|', '.', '.', '|', '|', '_', '|', '.', '.', '|' }
  };

  static_assert(xzr::ocr::parse(ocr_str) == 123456789, "expected 123456789");
  BOOST_CHECK_EQUAL(xzr::ocr::parse(ocr_str), 123456789);
}
